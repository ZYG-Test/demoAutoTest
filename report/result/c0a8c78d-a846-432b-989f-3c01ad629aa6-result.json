{"name": "cate_1商品列表数据正确", "status": "broken", "statusDetails": {"message": "pymysql.err.InternalError: (1065, 'Query was empty')", "trace": "self = <testcase.test_excel_case.TestExcel object at 0x00000253352221C8>\ncase = {'cookies': '', 'headers': '', 'status_code': 200.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(url,method,expect_result,res)\n        allure.dynamic.description(desc)\n    \n        #断言验证\n        #状态码，返回结果内容，数据库相关的结果的验证\n        #状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(int(res[\"code\"]),int(code))\n        #返回结果内容\n        assert_util.assert_in_body(str(res[\"body\"]),str(expect_result))\n        #数据库结果断言\n>       Base.assert_db(\"db_1\",res[\"body\"],db_verify)\n\ntestcase\\test_excel_case.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Base.py:33: in assert_db\n    db_res = sql.fetchone(db_verify)\nutils\\MysqlUtil.py:24: in fetchone\n    self.cursor.execute(sql)\nC:\\Python35\\lib\\site-packages\\pymysql\\cursors.py:170: in execute\n    result = self._query(query)\nC:\\Python35\\lib\\site-packages\\pymysql\\cursors.py:328: in _query\n    conn.query(q)\nC:\\Python35\\lib\\site-packages\\pymysql\\connections.py:517: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\nC:\\Python35\\lib\\site-packages\\pymysql\\connections.py:732: in _read_query_result\n    result.read()\nC:\\Python35\\lib\\site-packages\\pymysql\\connections.py:1075: in read\n    first_packet = self.connection._read_packet()\nC:\\Python35\\lib\\site-packages\\pymysql\\connections.py:684: in _read_packet\n    packet.check_error()\nC:\\Python35\\lib\\site-packages\\pymysql\\protocol.py:220: in check_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b'\\xff)\\x04#42000Query was empty'\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1065, 'Query was empty')\n\nC:\\Python35\\lib\\site-packages\\pymysql\\err.py:109: InternalError"}, "description": "<font color='red'>请求URL: </font> http://211.103.136.242:8064/categories/115/skus/<Br/><font color='red'>请求类型: </font>get<Br/><font color='red'>期望结果: </font><Br/><font color='red'>实际结果: </font>{'code': 200, 'body': {'count': 14, 'next': 'http://211.103.136.242:8064/categories/115/skus/?page=2', 'previous': None, 'results': [{'id': 3, 'name': 'Apple iPhone 8 Plus (A1864) 64GB 金色 移动联通电信4G手机', 'price': '6499.00', 'default_image_url': 'http://172.17.0.139:804/group1/M00/00/02/CtM3BVrRZCqAUxp9AAFti6upbx41220032', 'comments': 0}, {'id': 4, 'name': 'Apple iPhone 8 Plus (A1864) 256GB 金色 移动联通电信4G手机', 'price': '7988.00', 'default_image_url': 'http://172.17.0.139:804/group1/M00/00/02/CtM3BVrRZa6ANO_sAAFti6upbx40753757', 'comments': 0}]}}", "attachments": [{"name": "log", "source": "b401e197-d3b8-4b69-bb8d-cb329e2eca50-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'cate_1', '模块': '商品列表数据', '接口名称': '商品列表数据正确', '请求URL': '/categories/115/skus/', '前置条件': '', '请求类型': 'get', '请求参数类型': 'json', '请求参数': ' {\\n \"page\":\"1\",\\n \"page_size\": \"10\",\\n \"ordering\": \"create_time\"\\n }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1586788893395, "stop": 1586788893837, "uuid": "6832d938-7e9a-4e2c-9c2e-f9f0eb47bf65", "historyId": "a6736826978e9ba482cc5755e599ea59", "testCaseId": "dd2521432c4340b625f0f9387327dd8f", "fullName": "testcase.test_excel_case.TestExcel#test_run", "labels": [{"name": "feature", "value": "美多商城接口测试"}, {"name": "story", "value": "商品列表数据"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "LAPTOP-8FSK7C3Q"}, {"name": "thread", "value": "5588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_excel_case"}]}